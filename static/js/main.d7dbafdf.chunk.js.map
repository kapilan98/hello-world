{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","src","alt","cal","recipe1","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","getSearch","e","preventDefault","onSubmit","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,MAAQ,sBAAsB,IAAM,oBAAoB,MAAQ,wB,qNCiBrIC,EAhBA,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,YAClC,OACI,yBAAKC,UAAWC,IAAMC,QACtB,wBAAIF,UAAWC,IAAML,OAAQA,GAC7B,yBAAKO,IAAKL,EAAOM,IAAI,GAAGJ,UAAWC,IAAMH,QACzC,wBAAIE,UAAWC,IAAMI,KAArB,cAAsCR,GACtC,2CACA,wBAAKG,UAAWC,IAAMK,SAElBP,EAAYQ,KAAI,SAAAC,GAAU,OAE1B,4BAAKA,EAAWC,YC2CbC,EAlDJ,WAAM,IAAD,EAEcC,mBAAS,IAFvB,mBAEPC,EAFO,KAEEC,EAFF,OAGYF,mBAAS,IAHrB,mBAGPG,EAHO,KAGCC,EAHD,OAISJ,mBAAS,WAJlB,mBAIPK,EAJO,KAIDC,EAJC,KASdC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAC,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBARhB,WAQgB,oBAPf,qCAMG,cACTM,EADS,gBAEGA,EAASC,OAFZ,OAETC,EAFS,OAGfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJF,2CAAD,qDAWZG,EAAU,SAACC,GACfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAGV,OACE,yBAAKf,UAAU,OACf,yDACA,+GACA,0BAAMA,UAAU,cAAc+B,SAAUH,GACtC,2BAAOI,KAAK,OAAOhC,UAAU,aAAaiC,MAAOnB,EAAQoB,SAf7C,SAACL,GACjBd,EAAUc,EAAEM,OAAOF,OACnBP,QAAQC,IAAIb,MAcR,2BAAOkB,KAAK,SAASC,MAAM,SAASjC,UAAU,gBAAgB+B,SAAUH,KAEzEhB,EAAQL,KAAI,SAAAL,GAAM,OAEjB,kBAAC,EAAD,CAAQkC,IAAKlC,EAAOA,OAAOL,SAAUD,MAAOM,EAAOA,OAAOmC,MAClDxC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,mBCrCrBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.d7dbafdf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1VXWS\",\"recipe1\":\"recipe_recipe1__2Zwvo\",\"title\":\"recipe_title__XPYtX\",\"cal\":\"recipe_cal__32ogP\",\"image\":\"recipe_image__20QdQ\"};","import React from 'react'\r\nimport style from './recipe.module.css'\r\nconst Recipe = ({title,calories,image,ingredients}) =>{\r\n    return(\r\n        <div className={style.recipe}>\r\n        <h1 className={style.title}>{title}</h1>\r\n        <img src={image} alt=\"\" className={style.image}/>        \r\n        <h2 className={style.cal}>Calories : {calories}</h2>\r\n        <h2>Ingredients</h2>\r\n        <ol  className={style.recipe1} >{\r\n\r\n            ingredients.map(ingredient=>\r\n            (\r\n            <li>{ingredient.text}</li>))\r\n        }</ol>\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe","import React,{useEffect,useState} from 'react';\nimport './App.css';\n//import axios from 'axios'\nimport Recipe from './Recipe.js'\n\n\nconst App= () =>{\n\n  const [recipes, setRecipes]=useState([])\n  const [search, setSearch]=useState('')\n  const [query,setQuery]=useState('chicken')\n\n  const App_id='c9f5e4ed'\n  const App_key='95f1ee47754c45824e2b415b0d804bd5'\n\n  useEffect(()=>{\n    getRecipes()\n  },[query]) \n\n  const getRecipes=async()=>{\n    const response= await fetch(`https://api.edamam.com/search?q=${query}&app_id=${App_id}&app_key=${App_key}`)\n    const data= await response.json()\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\nconst updateState=(e)=>{\n  setSearch(e.target.value)\n  console.log(search)\n}\nconst getSearch=(e)=>{\n  e.preventDefault()\n  setQuery(search)\n  setSearch('')\n}\n\n  return(\n    <div className=\"App\">\n    <h1>Welcome to Kapil's Recipe</h1>\n    <h3>Type the any recipe you want to search for. Eg: Chicken, banana, spaghetti etc.</h3>\n    <form className=\"search-form\" onSubmit={getSearch}>\n      <input type=\"text\" className=\"search-bar\" value={search} onChange={updateState}/>\n      <input type=\"submit\" value=\"Submit\" className=\"search-button\" onSubmit={getSearch}/>\n    </form>\n    {recipes.map(recipe=>(\n\n      <Recipe key={recipe.recipe.calories} title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}/>\n      ))}\n\n    </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}